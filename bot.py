import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7624021359:AAGoDzEYgnBcVjlTf_RBYatJxgdNH4D-pd4"
ADMIN_ID = 638679272  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app = WebAppInfo(url="https://loading1234t.github.io/my-website/")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
    keyboard.add(types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç", web_app=web_app))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp —Å–æ–±—ã—Ç–∏–π (—á–∞—Ç –∏–ª–∏ –∑–∞–∫–∞–∑)
@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    data = message.web_app_data.data
    user = message.from_user

    if data == "chat":
        await bot.send_message(
            ADMIN_ID,
            f"üí¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ß–ê–¢!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"üîó @{user.username or '–ë–µ–∑ username'}\n"
            f"üÜî ID: <code>{user.id}</code>",
            parse_mode="HTML"
        )
        await message.answer("‚úÖ –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É.")

    elif data == "order":
        order_number = random.randint(10000, 99999)
        await bot.send_message(
            ADMIN_ID,
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"üîó @{user.username or '–ë–µ–∑ username'}\n"
            f"üÜî ID: <code>{user.id}</code>\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data=f"done:{order_number}")
            )
        )
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.")

# --- –†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(Text(startswith="buy:"))
async def handle_buy(message: types.Message):
    game_title = message.text.replace("buy:", "")
    confirm_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞", callback_data=f"confirm:{game_title}"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {game_title}?", reply_markup=confirm_keyboard)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(Text(startswith="confirm:"))
async def handle_confirm(call: types.CallbackQuery):
    game_title = call.data.replace("confirm:", "")
    order_number = random.randint(10000, 99999)
    await bot.send_message(
        ADMIN_ID,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {game_title}\nüî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data=f"done:{order_number}")
        )
    )
    await call.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ #{order_number} —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    await call.answer()

# --- –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(Text(equals="cancel"))
async def handle_cancel(call: types.CallbackQuery):
    await call.message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()

# --- –ü—Ä–æ–¥–∞–≤–µ—Ü –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑
@dp.callback_query_handler(Text(startswith="done:"))
async def handle_done(call: types.CallbackQuery):
    order_number = call.data.replace("done:", "")
    await call.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.\n–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
    await bot.send_message(
        call.from_user.id,
        f"üì¶ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –∑–∞–∫–∞–∑ #{order_number} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_finish:{order_number}")
        )
    )
    await call.answer()

# --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.callback_query_handler(Text(startswith="confirm_finish:"))
async def confirm_finish(call: types.CallbackQuery):
    order_number = call.data.replace("confirm_finish:", "")
    await bot.send_message(ADMIN_ID, f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_number}.\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.")
    await call.message.answer(f"–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ #{order_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await call.answer()

# --- –†—É—á–Ω–æ–π —á–∞—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /chat
@dp.message_handler(commands=['chat'])
async def handle_chat(message: types.Message):
    chat_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data="chat_with_seller")
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:", reply_markup=chat_keyboard)

@dp.callback_query_handler(Text(equals="chat_with_seller"))
async def chat_with_seller(call: types.CallbackQuery):
    try:
        await bot.send_message(ADMIN_ID, f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} —Ö–æ—á–µ—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è.")
        await call.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
